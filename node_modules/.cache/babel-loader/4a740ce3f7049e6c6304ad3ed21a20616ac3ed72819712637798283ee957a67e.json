{"ast":null,"code":"import db from \"./db.js\";\n\n/////////////////////////////////////////////////////////\n////// HELPERS\n/////////////////////////////////////////////////////////\n\n// Splits apart the URL.\nconst getUrlParts = url => new URL(url).pathname.split(\"/\").filter(part => part);\n\n/*\n  Checks that the URL is valid by comparing all parts of the path to the\n  keys within the database file, or checking to ensure that it is a number.\n*/\nconst UrlIsValid = url => {\n  return getUrlParts(url).every(part => Number(part) || db.keys.includes(part));\n};\n\n// Retrieves data from the appropriate level.\n_c = UrlIsValid;\nconst getData = url => {\n  const parts = getUrlParts(url);\n  return parts.reduce((acc, part) => {\n    const id = Number(part);\n    const accessor = isNaN(id) ? part : id - 1;\n    return acc[accessor];\n  }, db.data);\n};\n\n/////////////////////////////////////////////////////////\n////// MOCK REQUEST FUNCTIONS\n/////////////////////////////////////////////////////////\n\nconst retrieve = url => {\n  const data = getData(url);\n  if (!data) {\n    return {\n      status: 404,\n      message: \"Not Found\",\n      json: () => new Promise((resolve, reject) => {\n        const error = new Error(`${url} not found.`);\n        return reject(error);\n      })\n    };\n  } else {\n    return {\n      status: 200,\n      message: \"OK\",\n      json: () => new Promise(resolve => {\n        return resolve(data);\n      })\n    };\n  }\n};\nconst create = (url, options) => {\n  const data = getData(url);\n  const last = data[data.length - 1];\n  const body = typeof options.body === \"string\" ? JSON.parse(options.body) : options.body;\n  const newRecord = {\n    id: last ? last.id + 1 : 1,\n    ...body\n  };\n  data.push(newRecord);\n  return {\n    status: 201,\n    message: \"Created\",\n    json: () => new Promise(resolve => {\n      resolve(newRecord);\n    })\n  };\n};\nconst update = (url, options) => {\n  const data = getData(url);\n  const body = typeof options.body === \"string\" ? JSON.parse(options.body) : options.body;\n  for (let key in body) {\n    if (key !== \"id\") {\n      data[key] = body[key];\n    }\n  }\n  return {\n    status: 201,\n    message: \"Created\",\n    json: () => new Promise(resolve => {\n      resolve(data);\n    })\n  };\n};\nconst destroy = url => {\n  const parts = getUrlParts(url);\n  const id = Number(parts[parts.length - 1]);\n  const parentPath = [\"http://mockhost\", ...parts.slice(0, -1)].join(\"/\");\n  const data = getData(parentPath);\n  const index = data.findIndex(resource => resource.id === id);\n  data.splice(index, 1);\n  return {\n    status: 200,\n    message: \"OK\",\n    json: () => {\n      new Promise(resolve => resolve({\n        id\n      }));\n    }\n  };\n};\nconst MOCK_REQUEST_METHODS = {\n  GET: retrieve,\n  POST: create,\n  PUT: update,\n  DELETE: destroy\n};\nconst generateMockRequest = (url, options = {}) => {\n  const fn = MOCK_REQUEST_METHODS[options.method] || MOCK_REQUEST_METHODS.GET;\n  return fn(url, options);\n};\n\n/////////////////////////////////////////////////////////\n////// MOCK REQUEST FUNCTIONS\n/////////////////////////////////////////////////////////\n\n// Store local version of fetch.\nlet typicalFetch;\ntry {\n  typicalFetch = fetch;\n} catch (error) {\n  typicalFetch = () => {};\n}\n\n// Reassign fetch if the URL path includes 'mockhost'\nglobal.fetch = (url, options) => {\n  if (url.match(/http(s?):\\/\\/mockhost/i)) {\n    return new Promise((resolve, reject) => {\n      if (UrlIsValid(url)) {\n        const response = generateMockRequest(url, options);\n        return resolve(response);\n      } else {\n        return reject({\n          status: 500,\n          message: \"Internal server error\"\n        });\n      }\n    });\n  } else {\n    return typicalFetch(url, options);\n  }\n};\nexport default global.fetch;\nvar _c;\n$RefreshReg$(_c, \"UrlIsValid\");","map":{"version":3,"names":["db","getUrlParts","url","URL","pathname","split","filter","part","UrlIsValid","every","Number","keys","includes","_c","getData","parts","reduce","acc","id","accessor","isNaN","data","retrieve","status","message","json","Promise","resolve","reject","error","Error","create","options","last","length","body","JSON","parse","newRecord","push","update","key","destroy","parentPath","slice","join","index","findIndex","resource","splice","MOCK_REQUEST_METHODS","GET","POST","PUT","DELETE","generateMockRequest","fn","method","typicalFetch","fetch","global","match","response","$RefreshReg$"],"sources":["/Users/ahhyan/Chegg/flipcard-capstone-project/src/util/fetch.js"],"sourcesContent":["import db from \"./db.js\";\n\n/////////////////////////////////////////////////////////\n////// HELPERS\n/////////////////////////////////////////////////////////\n\n// Splits apart the URL.\nconst getUrlParts = (url) =>\n  new URL(url).pathname.split(\"/\").filter((part) => part);\n\n/*\n  Checks that the URL is valid by comparing all parts of the path to the\n  keys within the database file, or checking to ensure that it is a number.\n*/\nconst UrlIsValid = (url) => {\n  return getUrlParts(url).every(\n    (part) => Number(part) || db.keys.includes(part)\n  );\n};\n\n// Retrieves data from the appropriate level.\nconst getData = (url) => {\n  const parts = getUrlParts(url);\n  return parts.reduce((acc, part) => {\n    const id = Number(part);\n    const accessor = isNaN(id) ? part : id - 1;\n    return acc[accessor];\n  }, db.data);\n};\n\n/////////////////////////////////////////////////////////\n////// MOCK REQUEST FUNCTIONS\n/////////////////////////////////////////////////////////\n\nconst retrieve = (url) => {\n  const data = getData(url);\n  if (!data) {\n    return {\n      status: 404,\n      message: \"Not Found\",\n      json: () =>\n        new Promise((resolve, reject) => {\n          const error = new Error(`${url} not found.`);\n          return reject(error);\n        }),\n    };\n  } else {\n    return {\n      status: 200,\n      message: \"OK\",\n      json: () =>\n        new Promise((resolve) => {\n          return resolve(data);\n        }),\n    };\n  }\n};\n\nconst create = (url, options) => {\n  const data = getData(url);\n  const last = data[data.length - 1];\n  const body =\n    typeof options.body === \"string\" ? JSON.parse(options.body) : options.body;\n  const newRecord = {\n    id: last ? last.id + 1 : 1,\n    ...body,\n  };\n\n  data.push(newRecord);\n\n  return {\n    status: 201,\n    message: \"Created\",\n    json: () =>\n      new Promise((resolve) => {\n        resolve(newRecord);\n      }),\n  };\n};\n\nconst update = (url, options) => {\n  const data = getData(url);\n  const body =\n    typeof options.body === \"string\" ? JSON.parse(options.body) : options.body;\n\n  for (let key in body) {\n    if (key !== \"id\") {\n      data[key] = body[key];\n    }\n  }\n\n  return {\n    status: 201,\n    message: \"Created\",\n    json: () =>\n      new Promise((resolve) => {\n        resolve(data);\n      }),\n  };\n};\n\nconst destroy = (url) => {\n  const parts = getUrlParts(url);\n  const id = Number(parts[parts.length - 1]);\n  const parentPath = [\"http://mockhost\", ...parts.slice(0, -1)].join(\"/\");\n  const data = getData(parentPath);\n\n  const index = data.findIndex((resource) => resource.id === id);\n  data.splice(index, 1);\n\n  return {\n    status: 200,\n    message: \"OK\",\n    json: () => {\n      new Promise((resolve) => resolve({ id }));\n    },\n  };\n};\n\nconst MOCK_REQUEST_METHODS = {\n  GET: retrieve,\n  POST: create,\n  PUT: update,\n  DELETE: destroy,\n};\n\nconst generateMockRequest = (url, options = {}) => {\n  const fn = MOCK_REQUEST_METHODS[options.method] || MOCK_REQUEST_METHODS.GET;\n  return fn(url, options);\n};\n\n/////////////////////////////////////////////////////////\n////// MOCK REQUEST FUNCTIONS\n/////////////////////////////////////////////////////////\n\n// Store local version of fetch.\nlet typicalFetch;\ntry {\n  typicalFetch = fetch;\n} catch (error) {\n  typicalFetch = () => {};\n}\n\n// Reassign fetch if the URL path includes 'mockhost'\nglobal.fetch = (url, options) => {\n  if (url.match(/http(s?):\\/\\/mockhost/i)) {\n    return new Promise((resolve, reject) => {\n      if (UrlIsValid(url)) {\n        const response = generateMockRequest(url, options);\n        return resolve(response);\n      } else {\n        return reject({ status: 500, message: \"Internal server error\" });\n      }\n    });\n  } else {\n    return typicalFetch(url, options);\n  }\n};\n\nexport default global.fetch;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}